using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Text;
using TSQLGen.Annotations;

namespace TSQLGen
{
    public class TSQLGen<TModel> where TModel : class
    {
        public Table Table { get; }
        public String FieldEnclosureStart { get; set; }
        public String FieldEnclosureEnd { get; set; }
        public String TableEnclosureStart { get; set; }
        public String TableEnclosureEnd { get; set; }
        public String ParameterPrefix { get; set; }
        public String AutoGeneratedQuery { get; set; }


        public TSQLGen(DatabaseType databaseType)
        {
            //Database type
            if (databaseType == DatabaseType.MSSQL)
            {
                this.FieldEnclosureStart = "[";
                this.FieldEnclosureEnd = "]";
                this.TableEnclosureStart = "[";
                this.TableEnclosureEnd = "]";
                this.ParameterPrefix = "@";
                this.AutoGeneratedQuery = "SELECT SCOPE_IDENTITY()";
            }
            else if (databaseType == DatabaseType.MySQL)
            {
                this.FieldEnclosureStart = "`";
                this.FieldEnclosureEnd = "`";
                this.TableEnclosureStart = "`";
                this.TableEnclosureEnd = "`";
                this.ParameterPrefix = "@";
                this.AutoGeneratedQuery = "SELECT LAST_INSERT_ID()";

            }
            else
            {
                throw new Exceptions.NotSupportedException();
            }

            //Table attribute
            var tableAttribute = typeof(TModel)
                .GetCustomAttribute<Table>();
            if (tableAttribute != null)
                this.Table = tableAttribute;
            else throw new Exceptions.TableNotDefinedException();

            //Field attribute
            var fieldAttributes = typeof(TModel)
                .GetProperties()
                .Where(w => w.GetCustomAttribute<Field>() != null);
            if (fieldAttributes == null ||
                !fieldAttributes.Any())
                throw new Exceptions.FieldNotDefinedException();

        }

        #region " SQL Generator "

        public String GetInsertCommand()
        {
            //Defaults
            var fieldList = String.Join(", ", this.GetPropertiesNames(false, true, true));
            var parameterList = String.Join(", ", this.GetPropertiesNames(false, true, false, true));

            //SQL Gen
            var command = String.Empty;
            {
                command += $"insert into {this.GetEnclosuredTable(this.Table.Name)} ";
                command += $"({fieldList}) ";
                command += $"values ";
                command += $"({parameterList}) ";

                //Auto generated
                if (this.GetAutoGenerated().FirstOrDefault() != null)
                    command += this.AutoGeneratedQuery;
            }
            return command;
        }

        public String GetUpdateCommand(String pkPrefix = null)
        {
            //Defaults
            var properties = this.GetProperties(false, true);
            var primaryKey = this.GetPrimaryKeys()
                .FirstOrDefault();
            if (primaryKey == null)
                throw new Exceptions.PrimaryKeyNotDefinedException();


            //SQL Gen
            var command = String.Empty;
            {
                command += $"update {this.GetEnclosuredTable(this.Table.Name)} set ";
                foreach (var property in properties)
                {
                    var endComma = ",";
                    if (properties.LastOrDefault() == property)
                        endComma = String.Empty;

                    command += $"{this.GetPropertyName(property, true)}";
                    command += $" = ";
                    command += $"{this.GetPropertyName(property, false, true)}";
                    command += $"{endComma} ";
                }

                command += $"where ";
                command += $"{this.GetPropertyName(primaryKey, true)}";
                command += $" = ";
                command += $"{this.GetPropertyName(primaryKey, false, true)}";
                command += $"{pkPrefix}";

            }

            return command;
        }

        public String GetDeleteCommand()
        {
            //Defaults
            var primaryKey = this.GetPrimaryKeys()
                .FirstOrDefault();
            if (primaryKey == null)
                throw new Exceptions.PrimaryKeyNotDefinedException();

            //SQL Gen
            var command = String.Empty;
            {
                command += $"delete from {this.GetEnclosuredTable(this.Table.Name)} ";
                command += $"where ";
                command += $"{this.GetPropertyName(primaryKey, true)}";
                command += $" = ";
                command += $"{this.GetPropertyName(primaryKey, false, true)}";
            }

            return command;
        }

        public String GetSelectAllCommand()
        {
            //Defaults
            var fieldList = String.Join(", ", this.GetPropertiesNames(false, false, true));

            //SQL Gen
            var command = String.Empty;
            {
                command += $"select {fieldList} ";
                command += $"from {this.GetEnclosuredTable(this.Table.Name)}";
            }

            return command;
        }

        public String GetSelectByKeyCommand()
        {
            //Defaults
            var fieldList = String.Join(", ", this.GetPropertiesNames(false, false, true));
            var primaryKey = this.GetPrimaryKeys()
                .FirstOrDefault();
            if (primaryKey == null)
                throw new Exceptions.PrimaryKeyNotDefinedException();

            //SQL Gen
            var command = String.Empty;
            {
                command += $"select {fieldList} ";
                command += $"from {this.GetEnclosuredTable(this.Table.Name)} ";
                command += $"where ";
                command += $"{this.GetPropertyName(primaryKey, true)}";
                command += $" = ";
                command += $"{this.GetPropertyName(primaryKey, false, true)}";
            }

            return command;
        }

        #endregion

        #region " Utilities "

        private String GetEnclosuredTable(String value)
        {
            return this.TableEnclosureStart + value + this.TableEnclosureEnd;
        }

        public IEnumerable<PropertyInfo> GetProperties(Boolean excludePrimaries = false, Boolean excludeAutoGenerated = false)
        {
            var properties = typeof(TModel)
                .GetProperties()
                .Where(w => (w.GetCustomAttribute<Field>() != null) &&
                            (w.GetCustomAttribute<Field>().IsPrimaryKey != excludePrimaries || !excludePrimaries) &&
                            (w.GetCustomAttribute<Field>().IsAutoGenerated != excludeAutoGenerated || !excludeAutoGenerated));
            return properties;
        }

        public IEnumerable<PropertyInfo> GetPrimaryKeys()
        {
            var properties = this.GetProperties()
                .Where(w => w.GetCustomAttribute<Field>().IsPrimaryKey);
            return properties;
        }

        public IEnumerable<PropertyInfo> GetAutoGenerated()
        {
            var properties = this.GetProperties()
                .Where(w => w.GetCustomAttribute<Field>().IsAutoGenerated);
            return properties;
        }

        public IEnumerable<String> GetPropertiesNames(
            Boolean excludePrimaries = false,
            Boolean excludeAutoGenerated = false,
            Boolean applyEnclosure = false,
            Boolean applyPrefix = false)
        {
            var fields = this.GetProperties(excludePrimaries, excludeAutoGenerated)
                .Select(s => s.GetCustomAttribute<Field>().Name ?? s.Name);

            if (applyEnclosure)
                fields = fields.Select(s => $"{this.FieldEnclosureStart}{s}{this.FieldEnclosureEnd}");

            if (applyPrefix)
                fields = fields.Select(s => $"{this.ParameterPrefix}{s}");

            return fields;
        }

        public String GetPropertyName(
            PropertyInfo property,
            Boolean applyEnclosure = false,
            Boolean applyPrefix = false)
        {
            var fieldName = property.GetCustomAttribute<Field>().Name ?? property.Name;

            if (applyEnclosure)
                fieldName = $"{this.FieldEnclosureStart}{fieldName}{this.FieldEnclosureEnd}";

            if (applyPrefix)
                fieldName = $"{this.ParameterPrefix}{fieldName}";

            return fieldName;
        }

        #endregion
    }
}
